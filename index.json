{
  "api/System.Net.ArpRequest.html": {
    "href": "api/System.Net.ArpRequest.html",
    "title": "Class ArpRequest | wake-on-lan",
    "keywords": "Class ArpRequest Stellt Methoden für das Senden von Anfragen über das ARP-Protokoll bereit. Inheritance System.Object ArpRequest Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :System.Net Assembly :WakeOnLan.dll Syntax public static class ArpRequest Methods | Improve this Doc View Source Send(IPAddress) Sendet eine Anfrage über das ARP-Protokoll, um eine IP-Adresse in die Physikalische Adresse aufzulösen. Falls sich die physikalische Adresse bereits im Cache des Hosts befindet, wird diese zurückgegeben. Declaration public static ArpRequestResult Send(IPAddress destination) Parameters Type Name Description System.Net.IPAddress destination Destination System.Net.IPAddress . Returns Type Description ArpRequestResult Eine ArpRequestResult -Instanz, welche die Ergebnisse der Anfrage enthält."
  },
  "api/System.Net.PhysicalAddressType.html": {
    "href": "api/System.Net.PhysicalAddressType.html",
    "title": "Enum PhysicalAddressType | wake-on-lan",
    "keywords": "Enum PhysicalAddressType Der Typ der physikalischen Adresse gibt an, ob es um eine UNicast oder Multicast-Adresse handelt. Namespace :System.Net Assembly :WakeOnLan.dll Syntax public enum PhysicalAddressType Fields Name Description Multicast Bezeichnet eine Multicast-Adresse Unicast Bezeichnet eine Unicast-Adresse."
  },
  "api/System.Net.SendWol.html": {
    "href": "api/System.Net.SendWol.html",
    "title": "Class SendWol | wake-on-lan",
    "keywords": "Class SendWol Provides methods for sending Wake On LAN signals (magic packets). Inheritance System.Object SendWol Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :System.Net Assembly :WakeOnLan.dll Syntax public static class SendWol Methods | Improve this Doc View Source Send(IPEndPoint, Byte, Byte, Byte, Byte, Byte, Byte) Sends a Wake On LAN signal (magic packet) to a client. Declaration [Obsolete(\"Use an other overload of this method.\")] public static void Send(IPEndPoint target, byte mac0, byte mac1, byte mac2, byte mac3, byte mac4, byte mac5) Parameters Type Name Description System.Net.IPEndPoint target Destination System.Net.IPEndPoint . System.Byte mac0 First MAC Address byte. System.Byte mac1 Second MAC Address byte. System.Byte mac2 Third MAC Address byte. System.Byte mac3 Fourth MAC Address byte. System.Byte mac4 Fifth MAC Address byte. System.Byte mac5 Sixth MAC Address byte. Exceptions Type Condition System.Net.Sockets.SocketException An error occurred when accessing the socket. See Remarks section of System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint) for more information. | Improve this Doc View Source Send(IPEndPoint, Byte[]) Sends a Wake On LAN signal (magic packet) to a client. Declaration public static void Send(IPEndPoint target, byte[] macAddress) Parameters Type Name Description System.Net.IPEndPoint target Destination System.Net.IPEndPoint . System.Byte [] macAddress The MAC address of the designated client. Exceptions Type Condition System.ArgumentNullException target is null. System.ArgumentNullException macAddress is null. System.ArgumentException The length of the System.Byte array macAddress is not 6. System.Net.Sockets.SocketException An error occurred when accessing the socket. See Remarks section of System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint) for more information. | Improve this Doc View Source Send(IPEndPoint, Byte[], SecureOnPassword) Sends a Wake On LAN signal (magic packet) to a client. Declaration public static void Send(IPEndPoint target, byte[] macAddress, SecureOnPassword password) Parameters Type Name Description System.Net.IPEndPoint target Destination System.Net.IPEndPoint . System.Byte [] macAddress The MAC address of the designated client. SecureOnPassword password The SecureOn password of the client. Exceptions Type Condition System.ArgumentNullException target is null. System.ArgumentNullException macAddress is null. System.ArgumentException The length of the System.Byte array macAddress is not 6. System.Net.Sockets.SocketException An error occurred when accessing the socket. See Remarks section of System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint) for more information. | Improve this Doc View Source Send(IPEndPoint, PhysicalAddress) Sends a Wake On LAN signal (magic packet) to a client. Declaration public static void Send(IPEndPoint target, PhysicalAddress macAddress) Parameters Type Name Description System.Net.IPEndPoint target Destination System.Net.IPEndPoint . System.Net.NetworkInformation.PhysicalAddress macAddress The MAC address of the designated client. Exceptions Type Condition System.ArgumentNullException macAddress is null. System.Net.Sockets.SocketException An error occurred when accessing the socket. See Remarks section of System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint) for more information. | Improve this Doc View Source Send(IPEndPoint, PhysicalAddress, SecureOnPassword) Sends a Wake On LAN signal (magic packet) to a client. Declaration public static void Send(IPEndPoint target, PhysicalAddress macAddress, SecureOnPassword password) Parameters Type Name Description System.Net.IPEndPoint target Destination System.Net.IPEndPoint . System.Net.NetworkInformation.PhysicalAddress macAddress The MAC address of the designated client. SecureOnPassword password The SecureOn password of the client. Exceptions Type Condition System.ArgumentNullException macAddress is null. System.Net.Sockets.SocketException An error occurred when accessing the socket. See Remarks section of System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint) for more information."
  },
  "api/System.Net.Topology.NetMask.html": {
    "href": "api/System.Net.Topology.NetMask.html",
    "title": "Class NetMask | wake-on-lan",
    "keywords": "Class NetMask Represents an IPv4 net mask. Inheritance System.Object NetMask Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace :System.Net.Topology Assembly :WakeOnLan.dll Syntax public sealed class NetMask : INetMask, IEquatable<NetMask> Constructors | Improve this Doc View Source NetMask() Creates a new instance of NetMask with all bits set to 0. Declaration public NetMask() | Improve this Doc View Source NetMask(Byte) Creates a new instance of NetMask . Declaration public NetMask(byte cidr) Parameters Type Name Description System.Byte cidr The mask represented by the CIDR notation integer. | Improve this Doc View Source NetMask(Byte, Byte, Byte, Byte) Creates a new instance of NetMask . Declaration public NetMask(byte m1, byte m2, byte m3, byte m4) Parameters Type Name Description System.Byte m1 The first byte. System.Byte m2 The second byte. System.Byte m3 The third byte. System.Byte m4 The fourth byte. | Improve this Doc View Source NetMask(Byte[]) Creates a new instance of NetMask from an array of System.Byte . Declaration public NetMask(byte[] value) Parameters Type Name Description System.Byte [] value | Improve this Doc View Source NetMask(Int32) Creates a new instance of NetMask . Declaration public NetMask(int cidr) Parameters Type Name Description System.Int32 cidr The mask represented by the CIDR notation integer. | Improve this Doc View Source NetMask(IPAddress) Creates a new instance of NetMask from a given System.Net.IPAddress . Declaration public NetMask(IPAddress address) Parameters Type Name Description System.Net.IPAddress address The IPv4 address. | Improve this Doc View Source NetMask(NetMask) Creates a new instance of NetMask cloning an existing instance of NetMask . Declaration public NetMask(NetMask mask) Parameters Type Name Description NetMask mask Properties | Improve this Doc View Source AddressLength Gets the length of the net mask in bits. Declaration public int AddressLength { get; } Property Value Type Description System.Int32 Implements INetMask.AddressLength | Improve this Doc View Source Cidr Gets the amount of set bits from the left side (used in CIDR-Notation of net masks). Declaration public int Cidr { get; } Property Value Type Description System.Int32 Implements INetMask.Cidr | Improve this Doc View Source Empty Represents an empty IPv4 NetMask (all bits set to 0). Declaration public static NetMask Empty { get; } Property Value Type Description NetMask Methods | Improve this Doc View Source Abbreviate(NetMask, Int32) Abbreviates the current NetMask instance by a given value (CIDR-wise). Declaration public static NetMask Abbreviate(NetMask mask, int value) Parameters Type Name Description NetMask mask The mask to use as a reference. System.Int32 value The value. Returns Type Description NetMask Remarks Because NetMask is a reference type, this method is static. If it were not like this, you could change the value of NetMask .Empty, for example. | Improve this Doc View Source BitwiseAnd(IPAddress, NetMask) Bitwise combines a NetMask instance and an System.Net.IPAddress the AND operation. Declaration public static IPAddress BitwiseAnd(IPAddress address, NetMask mask) Parameters Type Name Description System.Net.IPAddress address The IPAddress. NetMask mask The net mask. Returns Type Description System.Net.IPAddress The bitwised combination using the AND operation. | Improve this Doc View Source BitwiseAnd(NetMask, IPAddress) Bitwise combines a NetMask instance and an System.Net.IPAddress the AND operation. Declaration public static IPAddress BitwiseAnd(NetMask mask, IPAddress address) Parameters Type Name Description NetMask mask The net mask. System.Net.IPAddress address The IPAddress. Returns Type Description System.Net.IPAddress The bitwised combination using the AND operation. | Improve this Doc View Source BitwiseAnd(NetMask, NetMask) Bitwise combines the two instances of NetMask using the AND operation. Declaration public static NetMask BitwiseAnd(NetMask n1, NetMask n2) Parameters Type Name Description NetMask n1 The first other. NetMask n2 The second other. Returns Type Description NetMask The bitwised combination using the AND operation. | Improve this Doc View Source BitwiseOr(NetMask, NetMask) Bitwise combines the two instances of NetMask using the OR operation. Declaration public static NetMask BitwiseOr(NetMask n1, NetMask n2) Parameters Type Name Description NetMask n1 The first other. NetMask n2 The second other. Returns Type Description NetMask The bitwised combination using the OR operation. | Improve this Doc View Source Equals(NetMask) Returns a value indicating whether this instance and a specified NetMask object represent the same other. Declaration public bool Equals(NetMask other) Parameters Type Name Description NetMask other An object to compare to this instance. Returns Type Description System.Boolean true if other is equal to this instance; otherwise, false. Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified System.Object represent the same type and other. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with this instance. Returns Type Description System.Boolean true if obj is a NetMask and equal to this instance; otherwise, false. Overrides System.Object.Equals(System.Object) | Improve this Doc View Source Extend(NetMask, Int32) Extends the current NetMask instance by a given value (CIDR-wise). Declaration public static NetMask Extend(NetMask mask, int value) Parameters Type Name Description NetMask mask The mask to use as a reference. System.Int32 value The value. Returns Type Description NetMask Remarks Because NetMask is a reference type, this method is static. If it were not like this, you could change the value of NetMask .Empty, for example. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer hash code. Overrides System.Object.GetHashCode() | Improve this Doc View Source GetIsValidNetMask(Byte[]) Returns a value indicating whether the given array of System.Byte represents a valid net mask. Declaration public static bool GetIsValidNetMask(byte[] mask) Parameters Type Name Description System.Byte [] mask Returns Type Description System.Boolean True if the given array of System.Byte represents a valid net mask, otherwise false. | Improve this Doc View Source GetMaskBytes() Gets the bits of the net mask instance as an BitArray object instance. Declaration public byte[] GetMaskBytes() Returns Type Description System.Byte [] The bits of the net mask instance as an BitArray object instance. Implements INetMask.GetMaskBytes() | Improve this Doc View Source ToString() Converts the other of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description System.String A string that represents the other of this instance. Overrides System.Object.ToString() Operators | Improve this Doc View Source BitwiseAnd(IPAddress, NetMask) Bitwise combines a NetMask instance and an System.Net.IPAddress the AND operation. Declaration public static IPAddress operator &(IPAddress address, NetMask mask) Parameters Type Name Description System.Net.IPAddress address The IPAddress. NetMask mask The net mask. Returns Type Description System.Net.IPAddress The bitwised combination using the AND operation. | Improve this Doc View Source BitwiseAnd(NetMask, IPAddress) Bitwise combines a NetMask instance and an System.Net.IPAddress the AND operation. Declaration public static IPAddress operator &(NetMask mask, IPAddress address) Parameters Type Name Description NetMask mask The net mask. System.Net.IPAddress address The IPAddress. Returns Type Description System.Net.IPAddress The bitwised combination using the AND operation. | Improve this Doc View Source BitwiseAnd(NetMask, NetMask) Bitwise combines the two instances of NetMask using the AND operation. Declaration public static NetMask operator &(NetMask n1, NetMask n2) Parameters Type Name Description NetMask n1 The first other. NetMask n2 The second other. Returns Type Description NetMask The bitwised combination using the AND operation. | Improve this Doc View Source BitwiseOr(NetMask, NetMask) Bitwise combines the two instances of NetMask using the OR operation. Declaration public static NetMask operator |(NetMask n1, NetMask n2) Parameters Type Name Description NetMask n1 The first other. NetMask n2 The second other. Returns Type Description NetMask The bitwised combination using the OR operation. | Improve this Doc View Source Equality(NetMask, NetMask) Returns a other indicating whether two instances of NetMask are equal. Declaration public static bool operator ==(NetMask n1, NetMask n2) Parameters Type Name Description NetMask n1 The first other to compare. NetMask n2 The second other to compare. Returns Type Description System.Boolean true if n1 and n2 are equal; otherwise, false. | Improve this Doc View Source Inequality(NetMask, NetMask) Returns a other indicating whether two instances of NetMask are not equal. Declaration public static bool operator !=(NetMask n1, NetMask n2) Parameters Type Name Description NetMask n1 The first other to compare. NetMask n2 The second other to compare. Returns Type Description System.Boolean true if n1 and n2 are not equal; otherwise, false. Extension Methods NetMaskExtensions.GetSiblingCount(NetMask) NetMaskExtensions.GetSiblingCount(NetMask, SiblingOptions)"
  },
  "api/System.Net.Topology.SiblingOptions.html": {
    "href": "api/System.Net.Topology.SiblingOptions.html",
    "title": "Enum SiblingOptions | wake-on-lan",
    "keywords": "Enum SiblingOptions Provides options for doing network sibling calculations using a net mask. Namespace :System.Net.Topology Assembly :WakeOnLan.dll Syntax [Flags] public enum SiblingOptions Fields Name Description ExcludeAll Do not include the broadcast or net address neither the addess passed to the method. ExcludeUnusable Include the addess passed to the method. Compliant to RFC 950 (2^n-2). IncludeAll Include all addresses possible. RFC 1878 (2^n). IncludeBroadcast Include the broadcast address. IncludeNetworkIdentifier Include the net address. IncludeSelf Include the addess passed to the method."
  },
  "api/System.Net.html": {
    "href": "api/System.Net.html",
    "title": "Namespace System.Net | wake-on-lan",
    "keywords": "Namespace System.Net Classes ArpRequest Stellt Methoden für das Senden von Anfragen über das ARP-Protokoll bereit. ArpRequestResult Enthält die Rückgabewerte der ArpRequest.Send-Funktion. SecureOnPassword Provides a SecureOn password. SendWol Provides methods for sending Wake On LAN signals (magic packets). Enums PhysicalAddressAdministrator Der Administrator der physikalischen Adresse gibt an, ob die Adresse globally unique oder local administrated ist. PhysicalAddressType Der Typ der physikalischen Adresse gibt an, ob es um eine UNicast oder Multicast-Adresse handelt."
  },
  "api/WakeOnLan.Testing.ByteArrayExtensionsTests.html": {
    "href": "api/WakeOnLan.Testing.ByteArrayExtensionsTests.html",
    "title": "Class ByteArrayExtensionsTests | wake-on-lan",
    "keywords": "Class ByteArrayExtensionsTests Inheritance System.Object TestHelper ByteArrayExtensionsTests Inherited Members TestHelper.Ba(Byte[]) TestHelper.Sa(String[]) TestHelper.Ca(Char[]) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :WakeOnLan.Testing Assembly :WakeOnLan.Testing.dll Syntax [TestFixture] public class ByteArrayExtensionsTests : TestHelper Methods | Improve this Doc View Source And() Declaration [Test] public void And() | Improve this Doc View Source AndEx() Declaration [Test] [ExpectedException(typeof (ArgumentNullException))] [Category(\"ArgumentNullException Tests\")] public void AndEx() | Improve this Doc View Source AndEx1() Declaration [Test] [ExpectedException(typeof (ArgumentNullException))] [Category(\"ArgumentNullException Tests\")] public void AndEx1() | Improve this Doc View Source BitStreamFromLeft() Declaration [Test] public void BitStreamFromLeft() | Improve this Doc View Source BitStreamFromRight() Declaration [Test] public void BitStreamFromRight() | Improve this Doc View Source BitStreamFromRightEx() Declaration [Test] [ExpectedException(typeof (ArgumentNullException))] [Category(\"ArgumentNullException Tests\")] public void BitStreamFromRightEx() | Improve this Doc View Source CounFromLeftEx() Declaration [Test] [ExpectedException(typeof (ArgumentNullException))] [Category(\"ArgumentNullException Tests\")] public void CounFromLeftEx() | Improve this Doc View Source CountFromLeft() Declaration [Test] public void CountFromLeft() | Improve this Doc View Source CountFromRight() Declaration [Test] public void CountFromRight() | Improve this Doc View Source CountFromRightEx() Declaration [Test] [ExpectedException(typeof (ArgumentNullException))] [Category(\"ArgumentNullException Tests\")] public void CountFromRightEx() | Improve this Doc View Source Not() Declaration [Test] public void Not() | Improve this Doc View Source NotEx() Declaration [Test] [ExpectedException(typeof (ArgumentNullException))] [Category(\"ArgumentNullException Tests\")] public void NotEx() | Improve this Doc View Source Or() Declaration [Test] public void Or() | Improve this Doc View Source OrEx() Declaration [Test] [ExpectedException(typeof (ArgumentNullException))] [Category(\"ArgumentNullException Tests\")] public void OrEx() | Improve this Doc View Source OrEx1() Declaration [Test] [ExpectedException(typeof (ArgumentNullException))] [Category(\"ArgumentNullException Tests\")] public void OrEx1() | Improve this Doc View Source RepresentsValidNetMask() Declaration [Test] public void RepresentsValidNetMask() | Improve this Doc View Source RepresentsValidNetMaskEx() Declaration [Test] [ExpectedException(typeof (ArgumentNullException))] [Category(\"ArgumentNullException Tests\")] public void RepresentsValidNetMaskEx() | Improve this Doc View Source ToBinaryString() Declaration [Test] public void ToBinaryString() | Improve this Doc View Source ToBinaryStringEx() Declaration [Test] [ExpectedException(typeof (ArgumentNullException))] [Category(\"ArgumentNullException Tests\")] public void ToBinaryStringEx() | Improve this Doc View Source ToBinaryStringEx1() Declaration [Test] [ExpectedException(typeof (ArgumentNullException))] [Category(\"ArgumentNullException Tests\")] public void ToBinaryStringEx1() | Improve this Doc View Source Xor() Declaration [Test] public void Xor() | Improve this Doc View Source XorEx() Declaration [Test] [ExpectedException(typeof (ArgumentNullException))] [Category(\"ArgumentNullException Tests\")] public void XorEx() | Improve this Doc View Source XorEx1() Declaration [Test] [ExpectedException(typeof (ArgumentNullException))] [Category(\"ArgumentNullException Tests\")] public void XorEx1()"
  },
  "api/System.Net.SecureOnPassword.html": {
    "href": "api/System.Net.SecureOnPassword.html",
    "title": "Class SecureOnPassword | wake-on-lan",
    "keywords": "Class SecureOnPassword Provides a SecureOn password. Inheritance System.Object SecureOnPassword Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :System.Net Assembly :WakeOnLan.dll Syntax [Serializable] public sealed class SecureOnPassword Constructors | Improve this Doc View Source SecureOnPassword(Byte[]) Initializes a new instance of SecureOnPassword with the given password. Declaration public SecureOnPassword(byte[] password) Parameters Type Name Description System.Byte [] password The password as System.Byte array. Exceptions Type Condition System.ArgumentNullException password is null. System.ArgumentException The length of the System.Byte array password is not 6. | Improve this Doc View Source SecureOnPassword(String) Initializes a new instance of SecureOnPassword with the given password. Declaration public SecureOnPassword(string password) Parameters Type Name Description System.String password The password as System.String . Remarks Uses System.Text.Encoding.Default as encoding. Exceptions Type Condition System.ArgumentNullException password is null. | Improve this Doc View Source SecureOnPassword(String, Encoding) Initializes a new instance of SecureOnPassword with the given password. Declaration public SecureOnPassword(string password, Encoding encoding) Parameters Type Name Description System.String password The password as System.String . System.Text.Encoding encoding The System.Text.Encoding instance to use for the password. Exceptions Type Condition System.ArgumentNullException password is null. System.ArgumentNullException encoding is null. System.ArgumentException The System.Byte array wich is created using the password has more elements than 6. Methods | Improve this Doc View Source GetPasswordBytes() Gets the buffer of the password. Declaration public byte[] GetPasswordBytes() Returns Type Description System.Byte [] | Improve this Doc View Source ToString() Converts the SecureOnPassword to dash notation. Declaration public override string ToString() Returns Type Description System.String A System.String representing the SecureOnPassword as dash notation. Overrides System.Object.ToString() | Improve this Doc View Source ToString(IFormatProvider) Converts the SecureOnPassword to dash notation. Declaration public string ToString(IFormatProvider format) Parameters Type Name Description System.IFormatProvider format Returns Type Description System.String A System.String representing the SecureOnPassword as dash notation."
  },
  "api/System.Net.Topology.INetMask.html": {
    "href": "api/System.Net.Topology.INetMask.html",
    "title": "Interface INetMask | wake-on-lan",
    "keywords": "Interface INetMask Provides an interface for IP net masks. Namespace :System.Net.Topology Assembly :WakeOnLan.dll Syntax public interface INetMask Properties | Improve this Doc View Source AddressLength Gets the length of the net mask in bits. Declaration int AddressLength { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Cidr Gets the amount of set bits from the left side (used in CIDR-Notation of net masks). Declaration int Cidr { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source GetMaskBytes() Gets the bits of the net mask instance as an BitArray object instance. Declaration byte[] GetMaskBytes() Returns Type Description System.Byte [] The bits of the net mask instance as an BitArray object instance"
  },
  "api/System.Net.Topology.NetMaskExtensions.html": {
    "href": "api/System.Net.Topology.NetMaskExtensions.html",
    "title": "Class NetMaskExtensions | wake-on-lan",
    "keywords": "Class NetMaskExtensions Provides extension methods for the NetMask . Inheritance System.Object NetMaskExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :System.Net.Topology Assembly :WakeOnLan.dll Syntax public static class NetMaskExtensions Methods | Improve this Doc View Source GetSiblingCount(NetMask) Gets the number of siblings an System.Net.IPAddress can have in a given network. Compliant to RFC 950 (2^n-2). Declaration public static int GetSiblingCount(this NetMask mask) Parameters Type Name Description NetMask mask The net mask of the network Returns Type Description System.Int32 The number of siblings an System.Net.IPAddress can have in the given network. | Improve this Doc View Source GetSiblingCount(NetMask, SiblingOptions) Gets the number of siblings an System.Net.IPAddress can have in a given network. Declaration public static int GetSiblingCount(this NetMask mask, SiblingOptions options) Parameters Type Name Description NetMask mask The net mask of the network SiblingOptions options Options which addresses to include an which not Returns Type Description System.Int32 The number of siblings an System.Net.IPAddress can have in the given network."
  },
  "api/System.Net.Topology.html": {
    "href": "api/System.Net.Topology.html",
    "title": "Namespace System.Net.Topology | wake-on-lan",
    "keywords": "Namespace System.Net.Topology Classes NetMask Represents an IPv4 net mask. NetMaskExtensions Provides extension methods for the NetMask . Interfaces INetMask Provides an interface for IP net masks. Enums SiblingOptions Provides options for doing network sibling calculations using a net mask."
  },
  "api/WakeOnLan.Testing.IPAddressExtensionsTests.html": {
    "href": "api/WakeOnLan.Testing.IPAddressExtensionsTests.html",
    "title": "Class IPAddressExtensionsTests | wake-on-lan",
    "keywords": "Class IPAddressExtensionsTests Inheritance System.Object TestHelper IPAddressExtensionsTests Inherited Members TestHelper.Ba(Byte[]) TestHelper.Sa(String[]) TestHelper.Ca(Char[]) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :WakeOnLan.Testing Assembly :WakeOnLan.Testing.dll Syntax [TestFixture] public class IPAddressExtensionsTests : TestHelper Methods | Improve this Doc View Source GetBroadcastAddress() Declaration [Test] public void GetBroadcastAddress() | Improve this Doc View Source GetHostIdentifier() Declaration [Test] public void GetHostIdentifier() | Improve this Doc View Source GetHostIdentifierEx() Declaration [Test] [ExpectedException(typeof (NotSupportedException))] public void GetHostIdentifierEx() | Improve this Doc View Source GetNetworkPrefix() Declaration [Test] public void GetNetworkPrefix() | Improve this Doc View Source GetNetworkPrefixEx() Declaration [Test] [ExpectedException(typeof (NotSupportedException))] public void GetNetworkPrefixEx()"
  },
  "api/WakeOnLan.Testing.TestHelper.html": {
    "href": "api/WakeOnLan.Testing.TestHelper.html",
    "title": "Class TestHelper | wake-on-lan",
    "keywords": "Class TestHelper Inheritance System.Object TestHelper ByteArrayExtensionsTests IPAddressExtensionsTests NetMaskTests Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :WakeOnLan.Testing Assembly :WakeOnLan.Testing.dll Syntax public abstract class TestHelper Methods | Improve this Doc View Source Ba(Byte[]) Declaration protected byte[] Ba(params byte[] bytes) Parameters Type Name Description System.Byte [] bytes Returns Type Description System.Byte [] | Improve this Doc View Source Ca(Char[]) Declaration protected char[] Ca(params char[] chars) Parameters Type Name Description System.Char [] chars Returns Type Description System.Char [] | Improve this Doc View Source Sa(String[]) Declaration protected string[] Sa(params string[] strings) Parameters Type Name Description System.String [] strings Returns Type Description System.String []"
  },
  "api/WakeOnLan.Testing.html": {
    "href": "api/WakeOnLan.Testing.html",
    "title": "Namespace WakeOnLan.Testing | wake-on-lan",
    "keywords": "Namespace WakeOnLan.Testing Classes ByteArrayExtensionsTests IPAddressExtensionsTests NetMaskTests TestHelper"
  },
  "api/toc.html": {
    "href": "api/toc.html",
    "title": "Table of Content",
    "keywords": ""
  },
  "toc.html": {
    "href": "toc.html",
    "title": "Table of Content",
    "keywords": ""
  },
  "README.html": {
    "href": "README.html",
    "title": "Wake-On-LAN | wake-on-lan",
    "keywords": "Wake-On-LAN A simple library for sending magic packets and performing IP address operations. Why? I wanted to create a library that matches all Microsoft Code Analysis rules and design guidelines. However, it does not fit at least one naming guideline. The default namespace is System.Net . I decided to do this because I want the library to be used like a normal part of the .NET Framework. Samples Sending a Magic Packet This sample uses 00:11:22:33:44:55 as MAC address. using System.Net; // ... // Using the IPAddess extension IPAddress.Broadcast.SendWol(0x00, 0x11, 0x22, 0x33, 0x44, 0x55); // via core SendWol class var endPoint = new IPEndPoint(IPAddress.Broadcast, 7); // You don't have to use Broadcast. // Every IP/port-combination is possible. SendWol.Send(endPoint, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55); // via IPEndPoint extension endPoint.SendWol(0x00, 0x11, 0x22, 0x33, 0x44, 0x55); // ... using System.Net.NetworkInformation; PhysicalAddress.Parse(\"00-11-22-33-44-55\").SendWol(); Getting Subnet Information You can also retrieve information about a subnet. using System.Net; using System.Net.Topology; // ... var someIp = new IPAddress(new byte[] { 192, 168, 1, 23 }); // Some IP address in the subnet var mask = new NetMask(255, 255, 255, 0); // the network mask of the subnet // CIDR-notation number of the network mask int cidr = mask.Cidr; var networkPrefix = someIp & mask; // bitwise operation to get the network address (192.168.1.0) networkPrefix = someIp.GetNetworkPrefix(mask); // using the extension method for IPAddress // retrieve broadcast address of the subnet (192.168.1.255) var broadcastAddress = someIp.GetBroadcastAddress(mask); IEnumerable<IPAddress> siblings = someIp.GetSiblings(mask, SiblingOptions.ExcludeUnusable); // Enumerate through all IP addresses in the subnet, except network prefix and broadcast (RFC 950, 2^n-2) foreach (IPAddress someIpInNetwork in siblings) { Console.WriteLine(someIpInNetwork.ToString()); } // Get number of possible siblings without someIp, broadcast and network prefix int siblingCount = mask.GetSiblingCount(SiblingOptions.ExcludeAll); ARP Requests To retrieve the MAC address of a host, there is a functionality for ARP-request built-in. It uses the Windows API method SendArp . ArpRequestResult res = ArpRequest.Send(someIp); if(res.Exception != null) { Console.WriteLine(\"ARP error occurred: \" + res.Exception.Message); } else { Console.WriteLine(\"Host MAC address: \" + res.Address.ToString()); } Note that there isn't always an MAC address available although there is a host. The reason for this could be the host is offline and/or the physical address is not cached somewhere. Also, this function uses a p/invoke. This might cause problems when used on platforms other than Windows. Async/Await This library also supports the Task-based Asynchronous Pattern (TAP). Every method that can send a magic packet synchronously is available as a TAP method returning a Task . await IPAddress.Broadcast.SendWolAsync(0x00, 0x11, 0x22, 0x33, 0x44, 0x55); Further Samples The System.Net.NetworkInformation.PhysicalAddress class is also supported as it represents a MAC address. var mac = new PhysicalAddress(new byte[] {0x00, 0x11, 0x22, 0x33, 0x44, 0x55}); mac.SendWol(); // via extension method Documentation There is an online documentation available here . It was built using sharpDox . You can download the .chm file here . Compatibility There is a compiled version for several versions of the .NET Framework. Currently these frameworks are supported: .NET 2.0 (does not include extension methods and async features) .NET 3.5 Client Profile (does not include async features) .NET 4.0 Client Profile (does not include async features) .NET 4.5 .NET 4.5.1 The latest compiled assemblies are in the build/lib directory of this repository. Alternatively, you can install the needed version using NuGet (see below). The following support is planned but not available yet: Silverlight Windows Phone 7 Windows Phone 8(.1) Windows Store NuGet Install the NuGet package of this library using Install-Package WakeOnLan"
  },
  "api/WakeOnLan.Testing.NetMaskTests.html": {
    "href": "api/WakeOnLan.Testing.NetMaskTests.html",
    "title": "Class NetMaskTests | wake-on-lan",
    "keywords": "Class NetMaskTests Inheritance System.Object TestHelper NetMaskTests Inherited Members TestHelper.Ba(Byte[]) TestHelper.Sa(String[]) TestHelper.Ca(Char[]) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :WakeOnLan.Testing Assembly :WakeOnLan.Testing.dll Syntax [TestFixture] public class NetMaskTests : TestHelper Methods | Improve this Doc View Source Abbreviate() Declaration [Test] public void Abbreviate() | Improve this Doc View Source AndIp() Declaration [Test] public void AndIp() | Improve this Doc View Source AndMask() Declaration [Test] public void AndMask() | Improve this Doc View Source Cidr() Declaration [Test] public void Cidr() | Improve this Doc View Source Constructor() Declaration [Test] public void Constructor() | Improve this Doc View Source ConstructorEx() Declaration [Test] [ExpectedException(typeof (ArgumentException))] [Category(\"ArgumentException Tests\")] public void ConstructorEx() | Improve this Doc View Source Empty() Declaration [Test] public void Empty() | Improve this Doc View Source EqualityOperator() Declaration [Test] public void EqualityOperator() | Improve this Doc View Source EqualsImplementation() Declaration [Test] public void EqualsImplementation() | Improve this Doc View Source Expand() Declaration [Test] public void Expand() | Improve this Doc View Source GetMaskBytes() Declaration [Test] public void GetMaskBytes() | Improve this Doc View Source Length() Declaration [Test] public void Length() | Improve this Doc View Source MaskValidity() Declaration [Test] public void MaskValidity() | Improve this Doc View Source Or() Declaration [Test] public void Or() | Improve this Doc View Source ToStringTest() Declaration [Test] public void ToStringTest()"
  },
  "api/System.Net.ArpRequestResult.html": {
    "href": "api/System.Net.ArpRequestResult.html",
    "title": "Class ArpRequestResult | wake-on-lan",
    "keywords": "Class ArpRequestResult Enthält die Rückgabewerte der ArpRequest.Send-Funktion. Inheritance System.Object ArpRequestResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :System.Net Assembly :WakeOnLan.dll Syntax public class ArpRequestResult Constructors | Improve this Doc View Source ArpRequestResult(Exception) Erstellt eine neue ArpRequestResult-Instanz Declaration public ArpRequestResult(Exception exception) Parameters Type Name Description System.Exception exception Der aufgetretene Fehler | Improve this Doc View Source ArpRequestResult(PhysicalAddress) Erstellt eine neue ArpRequestResult-Instanz Declaration public ArpRequestResult(PhysicalAddress address) Parameters Type Name Description System.Net.NetworkInformation.PhysicalAddress address Die physikalische Adresse Properties | Improve this Doc View Source Address Die aufgelöste physikalische Adresse. Declaration public PhysicalAddress Address { get; } Property Value Type Description System.Net.NetworkInformation.PhysicalAddress | Improve this Doc View Source Exception Falls Fehler bei der Protokollanfrage auftreten, werden diese in dieser Eigenschaft abgelegt. Andernfalls null. Declaration public Exception Exception { get; } Property Value Type Description System.Exception Methods | Improve this Doc View Source ToString() Konvertiert ARP-Rückgabewerte in eine Zeichenfolge. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/System.Net.PhysicalAddressAdministrator.html": {
    "href": "api/System.Net.PhysicalAddressAdministrator.html",
    "title": "Enum PhysicalAddressAdministrator | wake-on-lan",
    "keywords": "Enum PhysicalAddressAdministrator Der Administrator der physikalischen Adresse gibt an, ob die Adresse globally unique oder local administrated ist. Namespace :System.Net Assembly :WakeOnLan.dll Syntax public enum PhysicalAddressAdministrator Fields Name Description Global Die Adresse ist global einzigartig (nach der OUI). Local Die Adresse ist lokal administriert."
  }
}